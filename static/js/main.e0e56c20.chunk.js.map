{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","onClick","handleApplyColor","TableRow","cells","i","numCols","push","Table","addRow","setState","state","numRows","addColumn","removeColumn","removeRow","fillAll","NodeList","prototype","forEach","Array","ReactDOM","findDOMNode","tableRef","current","childNodes","row","style","backgroundColor","selectedColor","fillUncolored","clearAll","handleColorChange","event","target","value","React","createRef","rows","this","color","onChange","ref","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0e56c20.chunk.js","sourcesContent":["  \nfunction TableCell(props) {\n    return <td onClick={props.handleApplyColor}></td>\n  }\n  \n  export default TableCell;","  \nimport TableCell from \"./TableCell\";\n\nfunction TableRow(props) {\n  let cells = [];\n  \n  for (let i = 0; i < props.numCols; i++) {\n    cells.push(<TableCell handleApplyColor={props.handleApplyColor}/>)\n  }\n  \n  return <tr>{cells}</tr>\n}\n\nexport default TableRow;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport TableRow from \"./TableRow\";\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numRows: 1,\n      numCols: 1,\n      selectedColor: \"red\",\n    }\n    this.tableRef = React.createRef();\n  }\n\n  addRow = () => {\n    this.setState(state => {\n      return { numRows: state.numRows + 1 }\n    });\n  }\n\n  addColumn = () => {\n    this.setState(state => {\n      return { numCols: state.numCols + 1 }\n    });\n  }\n\n  removeColumn = () => {\n    this.setState(state => {\n      if (state.numCols > 0) {\n        return { numCols: state.numCols - 1 }\n      }\n    });\n  }\n\n  removeRow = () => {\n    this.setState(state => {\n      if (state.numRows > 0) {\n        return { numRows: state.numRows - 1 }\n      }\n    });\n  }\n\n  fillAll = () => {\n    NodeList.prototype.forEach = Array.prototype.forEach\n    const table = ReactDOM.findDOMNode(this.tableRef.current).childNodes;\n\n    table.forEach(row => {\n      for (let i = 0; i < this.state.numCols; i++) {\n        row.childNodes[i].style.backgroundColor = this.state.selectedColor;\n      }\n    });\n  }\n  fillUncolored = () => {\n    NodeList.prototype.forEach = Array.prototype.forEach\n    const table = ReactDOM.findDOMNode(this.tableRef.current).childNodes;\n\n    table.forEach(row => {\n      for (let i = 0; i < this.state.numCols; i++) {\n        let color = row.childNodes[i].style.backgroundColor\n        if (color === \"\") {\n          row.childNodes[i].style.backgroundColor = this.state.selectedColor;\n        }\n      }\n    });\n  }\n  clearAll = () => {\n    NodeList.prototype.forEach = Array.prototype.forEach\n    const table = ReactDOM.findDOMNode(this.tableRef.current).childNodes;\n\n    table.forEach(row => {\n      for (let i = 0; i < this.state.numCols; i++) {\n        let color = row.childNodes[i].style.backgroundColor\n        if (color !== \"\") {\n          row.childNodes[i].style.backgroundColor = \"white\"\n        }\n      }\n    });\n  }\n  handleColorChange = (event) => {\n    this.setState({ selectedColor: event.target.value });\n  }\n\n  handleApplyColor = (event) => {\n    event.target.style.backgroundColor = this.state.selectedColor;\n  }\n\n  render() {\n    let rows = [];\n\n    for (let i = 0; i < this.state.numRows; i++) {\n      rows.push(<TableRow numCols={this.state.numCols} handleApplyColor={this.handleApplyColor} color={this.state.color} />);\n    }\n\n    return (\n      <div>\n        <button onClick={this.addRow}>Add Row</button>\n        <button onClick={this.addColumn}>Add Column</button>\n        <button onClick={this.removeColumn}>Remove Column</button>\n        <button onClick={this.removeRow}>Remove Row</button>\n        <button onClick={this.fillAll}>Fill All</button>\n        <button onClick={this.fillUncolored}> Fill Uncolored </button>\n        <button onClick={this.clearAll}> Clear All</button>\n        <select onChange={this.handleColorChange}>\n          <option value=\"red\">red</option>\n          <option value=\"blue\">blue</option>\n          <option value=\"yellow\">yellow</option>\n          <option value=\"green\">green</option>\n        </select>\n        <table ref={this.tableRef}>\n          {rows}\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}